<?php

require_once 'PHPUnit/Framework.php';

require_once CLASS_PATH . '/AnnoLoader/Dependency/Builder/List.php';

/**
 * Test class for AnnoLoader_Dependency_Builder_List.
 * Generated by PHPUnit on 2011-01-17 at 14:30:48.
 */
class AnnoLoader_Dependency_Builder_ListTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var AnnoLoader_Dependency_Builder_List
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->keywords = array
		(
			'requires-file'				=> true,
			'requires-class'			=> true,
			'requires-directory-tree'	=> true,
			'requires-directory'		=> true,
			'requires-namespace'		=> true,
		);

		$this->aliasMap = array
		(
			'after-file'				=> 'requires-file',
			'after-class'				=> 'requires-class',
		);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	protected function _buildTest($path, $namespaceMap, $expectedResult)
	{
		$this->object = new AnnoLoader_Dependency_Builder_List
		(
			JS_PATH.$path,
			'js',
			new AnnoLoader_Namespace_Mapper(new AnnoLoader_Namespace_Map($namespaceMap)),
			new AnnoLoader_Directory_Iterator(),
			new AnnoLoader_Dependency_Builder_File(),
			new AnnoLoader_Dependency_Reader_Annotation('annoloader', $this->keywords, $this->aliasMap),
			new AnnoLoader_Dependency_Type_Factory()
		);

		$this->object->build();

		$fileList = $this->object->get();
		$filePathsList = array();

		foreach ($fileList as $fileListItem)
		{
			$filePathsList[] = $fileListItem->__toString();
		}

		if ($path === '/DependencyListBuilder/FileDependency/Ordered/')
			print_r($fileList);

		$this->assertEquals($expectedResult, $filePathsList);
	}

	public function testBuildSimpleFileDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/FileDependency/Simple/',
			array(),
			array
			(
				JS_PATH . '/DependencyListBuilder/FileDependency/Simple/ux/0.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Simple/ex/1.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Simple/main.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Simple/ex/2.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Simple/ex/3.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Simple/ex/4.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Simple/no/5.js',
			)
		);
	}

	public function testBuildCrossFileDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/FileDependency/Cross/',
			array(),
			array
			(
				JS_PATH . '/DependencyListBuilder/FileDependency/Cross/ext/0.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Cross/ux/1.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Cross/ex/2.js',
			)
		);
	}

	public function testBuildOrderedFileDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/FileDependency/Ordered/',
			array(),
			array
			(
				JS_PATH . '/DependencyListBuilder/FileDependency/Ordered/1.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Ordered/2.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Ordered/0.js',
				JS_PATH . '/DependencyListBuilder/FileDependency/Ordered/order.js',
			)
		);
	}

	public function testBuildClassDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/ClassDependency/',
			array
			(
				'Ext.ex'	=> 'ex',
				'Ext.ux'	=> 'ux',
			),
			array
			(
				JS_PATH . '/DependencyListBuilder/ClassDependency/ux/0.js',
				JS_PATH . '/DependencyListBuilder/ClassDependency/ex/1.js',
				JS_PATH . '/DependencyListBuilder/ClassDependency/ex/2.js',
				JS_PATH . '/DependencyListBuilder/ClassDependency/ex/3.js',
				JS_PATH . '/DependencyListBuilder/ClassDependency/ex/4.js',
				JS_PATH . '/DependencyListBuilder/ClassDependency/no/5.js',
			)
		);
	}

	public function testBuildSingleDirectoryDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/DirectoryDependency/Single/',
			array (),
			array
			(
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Single/ex/0.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Single/ex/1.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Single/ex/2.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Single/ux/3.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Single/ux/4.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Single/last.js',
			)
		);
	}

	public function testBuildTreeDirectoryDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/DirectoryDependency/Tree/',
			array(),
			array
			(
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Tree/ex/0.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Tree/ex/ex1/1.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Tree/ex/ex1/ex2/2.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Tree/3.js',
			)
		);
	}

	public function testBuildMixedDirectoryDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/DirectoryDependency/Mixed/',
			array(),
			array
			(
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Mixed/ex/0.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Mixed/ex/ex1/1.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Mixed/ex/ex1/ex2/2.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Mixed/ux/3.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Mixed/4.js',
			)
		);
	}

	public function testBuildCrossDirectoryDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/DirectoryDependency/Cross/',
			array(),
			array
			(
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Cross/ext/0.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Cross/ux/1.js',
				JS_PATH . '/DependencyListBuilder/DirectoryDependency/Cross/ex/2.js',
			)
		);
	}

	public function testBuildNamespaceDependencyOnly()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/NamespaceDependency/',
			array
			(
				'Ext.ex'	=> 'ex',
				'Ext.ux'	=> 'ux',
			),
			array
			(
				JS_PATH . '/DependencyListBuilder/NamespaceDependency/ex/data/1.js',
				JS_PATH . '/DependencyListBuilder/NamespaceDependency/ex/data/2.js',
				JS_PATH . '/DependencyListBuilder/NamespaceDependency/ux/data/3.js',
				JS_PATH . '/DependencyListBuilder/NamespaceDependency/ux/data/4.js',
				JS_PATH . '/DependencyListBuilder/NamespaceDependency/last.js',
			)
		);
	}

	public function testBuildMixedDependency()
	{
		$this->_buildTest
		(
			'/DependencyListBuilder/MixedDependency/',
			array
			(
				'Ext.ex'	=> 'ex',
				'Ext.ux'	=> 'ux',
				'Ext.App'	=> 'app',
			),
			array
			(
				JS_PATH . '/DependencyListBuilder/MixedDependency/ext/1.js',
				JS_PATH . '/DependencyListBuilder/MixedDependency/ex/2.js',
				JS_PATH . '/DependencyListBuilder/MixedDependency/ux/3.js',
				JS_PATH . '/DependencyListBuilder/MixedDependency/app/Application.js',
				JS_PATH . '/DependencyListBuilder/MixedDependency/last.js',
			)
		);
	}

}

?>
